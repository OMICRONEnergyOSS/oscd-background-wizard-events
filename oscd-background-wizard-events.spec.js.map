{"version":3,"file":"oscd-background-wizard-events.spec.js","sourceRoot":"","sources":["../oscd-background-wizard-events.spec.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AACpE,gFAAgF;AAChF,8CAA8C;AAC9C,OAAO,+CAA+C,CAAC;AAEvD,OAAO,EAAY,GAAG,EAAE,MAAM,OAAO,CAAC;AAEtC,OAAO,YAAY,MAAM,oCAAoC,CAAC;AAG9D,OAAO,EACL,mBAAmB,EACnB,oBAAoB,EACpB,kBAAkB,GACnB,MAAM,iBAAiB,CAAC;AAGzB,MAAM,GAAG,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CACzC,iDAAiD,EACjD,iBAAiB,CAClB,CAAC;AAEF,cAAc,CAAC,MAAM,CAAC,+BAA+B,EAAE,YAAY,CAAC,CAAC;AAErE,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAI,aAAmC,CAAC;IAExC,IAAI,eAAyB,CAAC;IAE9B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,eAAe,GAAG,GAAG,EAAE,CAAC;QAExB,aAAa,GAAG,MAAM,OAAO,CAC3B,IAAI,CAAA,iEAAiE,CACtE,CAAC;QACF,aAAa,CAAC,MAAM,GAAG;YACrB,MAAM,EAAE,eAAe;SACA,CAAC;QAC1B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAEpC,aAAa,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;IAExC,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;QACnG,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,YAAY,CAAE,CAAC;QAChD,MAAM,OAAO,GAAG,KAAK,CAAC;QACtB,aAAa,CAAC,aAAa,CAAC,oBAAoB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QACnE,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,cAAc,GAClB,aAAa,EAAE,UAAU,EAAE,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,cAAc,EAAE,UAAU,EAAE,aAAa,CACxD,WAAW,CACsB,CAAC;QACpC,MAAM,QAAQ,CAAC,cAAc,CAAC;QAE9B,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;QAEzE,MAAM,SAAS,GAAG,QAAQ,EAAE,aAAa,CACvC,8BAA8B,CACW,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAC3B,SAAU,CAAC,KAAK,GAAG,SAAS,CAAC;QAC7B,SAAU,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE9C,MAAM,SAAU,CAAC,cAAc,CAAC;QAEhC,MAAM,YAAY,GAAG,QAAQ,EAAE,aAAa,CAC1C,iDAAiD,CACtB,CAAC;QAC9B,YAAY,EAAE,KAAK,EAAE,CAAC;QACtB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,mCAAmC,CAAC,CAAC;QAC3E,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;QAChG,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,YAAY,CAAE,CAAC;QACjD,aAAa,CAAC,aAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;QACzD,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,cAAc,GAClB,aAAa,EAAE,UAAU,EAAE,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,cAAc,EAAE,UAAU,EAAE,aAAa,CACxD,WAAW,CACsB,CAAC;QACpC,MAAM,QAAQ,CAAC,cAAc,CAAC;QAE9B,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;QAEzE,MAAM,SAAS,GAAG,QAAQ,EAAE,aAAa,CACvC,8BAA8B,CACW,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAC3B,SAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QACzB,SAAU,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE9C,MAAM,SAAU,CAAC,cAAc,CAAC;QAEhC,MAAM,YAAY,GAAG,QAAQ,EAAE,aAAa,CAC1C,iDAAiD,CACtB,CAAC;QAC9B,YAAY,EAAE,KAAK,EAAE,CAAC;QACtB,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,mCAAmC,CAAC,CAAC;QAC3E,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;QACjF,MAAM,OAAO,GAAG,GAAG,CAAC,aAAa,CAAC,YAAY,CAAE,CAAC;QACjD,aAAa,CAAC,aAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;QACzD,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,cAAc,GAClB,aAAa,EAAE,UAAU,EAAE,aAAa,CAAC,kBAAkB,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,cAAc,EAAE,UAAU,EAAE,aAAa,CACxD,WAAW,CACsB,CAAC;QACpC,MAAM,QAAQ,CAAC,cAAc,CAAC;QAE9B,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;QAEzE,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QAC9D,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,mCAAmC,CAAC,CAAC;QAC3E,MAAM,aAAa,CAAC,cAAc,CAAC;QAEnC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport { expect, fixture, html, waitUntil } from '@open-wc/testing';\n// Note: it would be nice if the tests could be run with scoped custom elements,\n// but for now, we'll use the global registry.\nimport '@webcomponents/scoped-custom-element-registry';\n\nimport { SinonSpy, spy } from 'sinon';\n\nimport OscdMenuOpen from './oscd-background-wizard-events.js';\nimport OscdBackgroundEditV1 from './oscd-background-wizard-events.js';\nimport { XMLEditor } from '@omicronenergy/oscd-editor';\nimport {\n  newCloseWizardEvent,\n  newCreateWizardEvent,\n  newEditWizardEvent,\n} from './foundation.js';\nimport { LitElement } from 'lit';\n\nconst doc = new DOMParser().parseFromString(\n  '<SCL><Substation name=\"AA1\"></Substation></SCL>',\n  'application/xml',\n);\n\ncustomElements.define('oscd-background-wizard-events', OscdMenuOpen);\n\ndescribe('oscd-background-wizard-events', () => {\n  let pluginFixture: OscdBackgroundEditV1;\n\n  let xmlEditorCommit: SinonSpy;\n\n  beforeEach(async () => {\n    xmlEditorCommit = spy();\n\n    pluginFixture = await fixture(\n      html`<oscd-background-wizard-events></oscd-background-wizard-events>`,\n    );\n    pluginFixture.editor = {\n      commit: xmlEditorCommit,\n    } as unknown as XMLEditor;\n    document.body.append(pluginFixture);\n\n    pluginFixture.click();\n  });\n\n  afterEach(() => pluginFixture.remove());\n\n  it('opens the create oscd-edit-dialog upon receiving a oscd-create-wizard-request event', async () => {\n    const parent = doc.querySelector('Substation')!;\n    const tagName = 'Bay';\n    pluginFixture.dispatchEvent(newCreateWizardEvent(parent, tagName));\n    await pluginFixture.updateComplete;\n\n    const oscdEditDialog =\n      pluginFixture?.shadowRoot?.querySelector('oscd-edit-dialog');\n    const mdDialog = oscdEditDialog?.shadowRoot?.querySelector(\n      'md-dialog',\n    ) as LitElement & { open: boolean };\n    await mdDialog.updateComplete;\n\n    await waitUntil(() => mdDialog.open, 'Dialog timed out waiting to open');\n\n    const nameField = mdDialog?.querySelector(\n      'scl-text-field[label=\"name\"]',\n    ) as (LitElement & HTMLInputElement) | null;\n    expect(nameField).to.exist;\n    nameField!.value = 'TestBay';\n    nameField!.dispatchEvent(new Event('change'));\n\n    await nameField!.updateComplete;\n\n    const createButton = mdDialog?.querySelector(\n      \"div[slot='actions'] md-text-button:last-of-type\",\n    ) as HTMLButtonElement | null;\n    createButton?.click();\n    await waitUntil(() => !mdDialog.open, 'Dialog timed out waiting to close');\n    await pluginFixture.updateComplete;\n\n    expect(xmlEditorCommit.calledOnce).to.equal(true);\n  });\n\n  it('opens the edit oscd-edit-dialog upon receiving an oscd-edit-wizard-request event', async () => {\n    const element = doc.querySelector('Substation')!;\n    pluginFixture.dispatchEvent(newEditWizardEvent(element));\n    await pluginFixture.updateComplete;\n\n    const oscdEditDialog =\n      pluginFixture?.shadowRoot?.querySelector('oscd-edit-dialog');\n    const mdDialog = oscdEditDialog?.shadowRoot?.querySelector(\n      'md-dialog',\n    ) as LitElement & { open: boolean };\n    await mdDialog.updateComplete;\n\n    await waitUntil(() => mdDialog.open, 'Dialog timed out waiting to open');\n\n    const nameField = mdDialog?.querySelector(\n      'scl-text-field[label=\"name\"]',\n    ) as (LitElement & HTMLInputElement) | null;\n    expect(nameField).to.exist;\n    nameField!.value = 'AA2';\n    nameField!.dispatchEvent(new Event('change'));\n\n    await nameField!.updateComplete;\n\n    const createButton = mdDialog?.querySelector(\n      \"div[slot='actions'] md-text-button:last-of-type\",\n    ) as HTMLButtonElement | null;\n    createButton?.click();\n    await waitUntil(() => !mdDialog.open, 'Dialog timed out waiting to close');\n    await pluginFixture.updateComplete;\n\n    expect(xmlEditorCommit.calledOnce).to.equal(true);\n  });\n\n  it('closes oscd-edit-dialog upon receiving an oscd-close-wizard event', async () => {\n    const element = doc.querySelector('Substation')!;\n    pluginFixture.dispatchEvent(newEditWizardEvent(element));\n    await pluginFixture.updateComplete;\n\n    const oscdEditDialog =\n      pluginFixture?.shadowRoot?.querySelector('oscd-edit-dialog');\n    const mdDialog = oscdEditDialog?.shadowRoot?.querySelector(\n      'md-dialog',\n    ) as LitElement & { open: boolean };\n    await mdDialog.updateComplete;\n\n    await waitUntil(() => mdDialog.open, 'Dialog timed out waiting to open');\n\n    pluginFixture.dispatchEvent(newCloseWizardEvent({ element }));\n    await pluginFixture.updateComplete;\n\n    await waitUntil(() => !mdDialog.open, 'Dialog timed out waiting to close');\n    await pluginFixture.updateComplete;\n\n    expect(xmlEditorCommit.called).to.equal(false);\n  });\n});\n"]}